// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Component for the Tutor Card.
 */

import { Component, EventEmitter, Input, Output } from '@angular/core';
import { downgradeComponent } from '@angular/upgrade/static';
import { AppConstants } from 'app.constants';
import { StateCard } from 'domain/state_card/StateCardObjectFactory';
import { UrlInterpolationService } from 'domain/utilities/url-interpolation.service';
import { cloneDeep } from 'lodash';
import { Subscription } from 'rxjs';
import { AudioBarStatusService } from 'services/audio-bar-status.service';
import { AudioPlayerService } from 'services/audio-player.service';
import { AutogeneratedAudioPlayerService } from 'services/autogenerated-audio-player.service';
import { ContextService } from 'services/context.service';
import { DeviceInfoService } from 'services/contextual/device-info.service';
import { UrlService } from 'services/contextual/url.service';
import { WindowDimensionsService } from 'services/contextual/window-dimensions.service';
import { UserService } from 'services/user.service';
import { ExplorationPlayerConstants } from '../exploration-player-page.constants';
import { AudioPreloaderService } from '../services/audio-preloader.service';
import { AudioTranslationManagerService } from '../services/audio-translation-manager.service';
import { CurrentInteractionService } from '../services/current-interaction.service';
import { ExplorationPlayerStateService } from '../services/exploration-player-state.service';
import { LearnerAnswerInfoService } from '../services/learner-answer-info.service';
import { PlayerPositionService } from '../services/player-position.service';

@Component({
  selector: 'oppia-tutor-card',
  templateUrl: './tutor-card.component.html'
})
export class TutorCardComponent {
  @Input() isLearnAgainButton: boolean;
  @Input() onDismiss;
  @Input() displayedCard: StateCard;
  @Input() startCardChangeAnimation;
  @Output() startCardChangeAnimationChange: EventEmitter<void> = (
    new EventEmitter());
  @Input() avatarImageIsShown: boolean;
  directiveSubscriptions = new Subscription();
  private _editorPreviewMode;
  arePreviousResponsesShown: boolean = false;
  lastAnswer;
  conceptCardIsBeingShown: boolean;
  interactionIsActive: boolean;
  waitingForOppiaFeedback: boolean = false;
  interactionInstructions;
  contentAudioTranslations;
  isIframed: boolean;
  isAudioBarExpandedOnMobileDevice: () => boolean;
  getCanAskLearnerForAnswerInfo: () => boolean;
  OPPIA_AVATAR_IMAGE_URL: string;
  OPPIA_AVATAR_LINK_URL: string;
  profilePicture: string;

  constructor(
    private audioBarStatusService: AudioBarStatusService,
    private audioPlayerService: AudioPlayerService,
    private audioPreloaderService: AudioPreloaderService,
    private audioTranslationManagerService: AudioTranslationManagerService,
    private autogeneratedAudioPlayerService: AutogeneratedAudioPlayerService,
    private contextService: ContextService,
    private currentInteractionService: CurrentInteractionService,
    private deviceInfoService: DeviceInfoService,
    private explorationPlayerStateService: ExplorationPlayerStateService,
    private learnerAnswerInfoService: LearnerAnswerInfoService,
    private playerPositionService: PlayerPositionService,
    private urlInterpolationService: UrlInterpolationService,
    private urlService: UrlService,
    private userService: UserService,
    private windowDimensionsService: WindowDimensionsService
  ) {}

  ngOnInit(): void {
    this._editorPreviewMode = this.contextService.isInExplorationEditorPage();
    this.isIframed = this.urlService.isIframed();
    this.isAudioBarExpandedOnMobileDevice = () => {
      return (
        this.deviceInfoService.isMobileDevice() &&
        this.audioBarStatusService.isAudioBarExpanded()
      );
    };
    this.getCanAskLearnerForAnswerInfo = (
      this.learnerAnswerInfoService.getCanAskLearnerForAnswerInfo);
    this.OPPIA_AVATAR_IMAGE_URL = (
      this.urlInterpolationService
        .getStaticImageUrl('/avatar/oppia_avatar_100px.svg'));
    this.OPPIA_AVATAR_LINK_URL = AppConstants.OPPIA_AVATAR_LINK_URL;
    this.profilePicture = this.urlInterpolationService
      .getStaticImageUrl('/avatar/user_blue_72px.png');

    if (!this._editorPreviewMode) {
      this.userService.getProfileImageDataUrlAsync().then((dataUrl) => {
        this.profilePicture = dataUrl;
      });
    } else {
      this.profilePicture = (
        this.urlInterpolationService.getStaticImageUrl(
          AppConstants.DEFAULT_PROFILE_IMAGE_PATH));
    }

    this.directiveSubscriptions.add(
      this.playerPositionService.onActiveCardChanged.subscribe(
        () => {
          this.updateDisplayedCard();
        }
      )
    );

    this.directiveSubscriptions.add(
      this.explorationPlayerStateService.onOppiaFeedbackAvailable.subscribe(
        () => {
          this.waitingForOppiaFeedback = false;

          // Auto scroll to the new feedback on mobile device.
          if (this.deviceInfoService.isMobileDevice()) {
            let latestFeedbackIndex = (
              this.displayedCard.getInputResponsePairs().length - 1);

            // some work left here.
          }
        }
      )
    );
    this.updateDisplayedCard();
  }

  ngOnDestroy(): void {
    this.directiveSubscriptions.unsubscribe();
  }

  updateDisplayedCard(): void {
    this.arePreviousResponsesShown = false;
    this.lastAnswer = null;
    this.conceptCardIsBeingShown = Boolean(
      !this.displayedCard.getInteraction());
    this.interactionIsActive =
      !this.displayedCard.isCompleted();
    this.directiveSubscriptions.add(
      this.playerPositionService.onNewCardAvailable.subscribe(
        (data) => this.interactionIsActive = false
      )
    );
    this.currentInteractionService.registerPresubmitHook(() => {
      this.waitingForOppiaFeedback = true;
    });
    if (!this.interactionIsActive) {
      this.lastAnswer = this.displayedCard.getLastAnswer();
    }
    if (!this.conceptCardIsBeingShown) {
      this.interactionInstructions = (
        this.displayedCard.getInteractionInstructions());
      this.contentAudioTranslations = (
        this.displayedCard.getVoiceovers());
      this.audioTranslationManagerService
        .clearSecondaryAudioTranslations();
      this.audioTranslationManagerService.setContentAudioTranslations(
        cloneDeep(this.contentAudioTranslations),
        this.displayedCard.getContentHtml(),
        AppConstants.COMPONENT_NAME_CONTENT);
      this.audioPlayerService.stop();
      this.audioPreloaderService.clearMostRecentlyRequestedAudioFilename();
      this.autogeneratedAudioPlayerService.cancel();
    }
  }

  isInteractionInline(): boolean {
    if (this.conceptCardIsBeingShown) {
      return true;
    }
    return this.displayedCard.isInteractionInline();
  }

  getContentAudioHighlightClass(): Object {
    if (this.audioTranslationManagerService
      .getCurrentComponentName() ===
      AppConstants.COMPONENT_NAME_CONTENT &&
      (this.audioPlayerService.isPlaying() ||
      this.autogeneratedAudioPlayerService.isPlaying())) {
      return ExplorationPlayerConstants.AUDIO_HIGHLIGHT_CSS_CLASS;
    }
  }

  getContentFocusLabel(index: number): string {
    return ExplorationPlayerConstants.CONTENT_FOCUS_LABEL_PREFIX + index;
  }

  toggleShowPreviousResponses(): void {
    this.arePreviousResponsesShown =
      !this.arePreviousResponsesShown;
  }

  isWindowNarrow(): boolean {
    return this.windowDimensionsService.isWindowNarrow();
  }

  canWindowShowTwoCards(): boolean {
    return this.windowDimensionsService.getWidth() >
    ExplorationPlayerConstants.TWO_CARD_THRESHOLD_PX;
  }

  showAudioBar(): boolean {
    return (
      !this.isIframed &&
      !this.explorationPlayerStateService.isInQuestionMode());
  }

  isContentAudioTranslationAvailable(): boolean {
    if (this.conceptCardIsBeingShown) {
      return false;
    }
    return (
      this.displayedCard.isContentAudioTranslationAvailable());
  }

  isCurrentCardAtEndOfTranscript(): boolean {
    return !this.displayedCard.isCompleted();
  }

  isOnTerminalCard(): boolean {
    return this.displayedCard.isTerminal();
  }

  getInputResponsePairId(index: number): string {
    return 'input-response-pair-' + index;
  }
}

angular.module('oppia').directive('oppiaTutorCard',
  downgradeComponent({
    component: TutorCardComponent
  }) as angular.IDirectiveFactory);

// Angular.module('oppia').animation(
//   '.conversation-skin-responses-animate-slide', function() {
//     return {
//       removeClass: function(element, className, done) {
//         if (className !== 'ng-hide') {
//           done();
//           return;
//         }
//         element.hide().slideDown(400, <(this: HTMLElement) => void>done);
//       },
//       addClass: function(element, className, done) {
//         if (className !== 'ng-hide') {
//           done();
//           return;
//         }
//         element.slideUp(400, <(this: HTMLElement) => void>done);
//       }
//     };
//   });

// angular.module('oppia').directive('tutorCard', [
//   'UrlInterpolationService', function(UrlInterpolationService) {
//     return {
//       restrict: 'E',
//       scope: {
//         isLearnAgainButton: '&',
//         onDismiss: '&',
//         getDisplayedCard: '&displayedCard',
//         startCardChangeAnimation: '=',
//         isAvatarImageShown: '&avatarImageIsShown'
//       },
//       template: require('./tutor-card.directive.html'),
//       controller: [
//         '$anchorScroll', '$location', '$rootScope', '$scope',
//         'AudioBarStatusService', 'AudioPlayerService', 'AudioPreloaderService',
//         'AudioTranslationManagerService', 'AutogeneratedAudioPlayerService',
//         'ContextService', 'CurrentInteractionService', 'DeviceInfoService',
//         'ExplorationPlayerStateService', 'LearnerAnswerInfoService',
//         'PlayerPositionService', 'UrlService', 'UserService',
//         'WindowDimensionsService', 'AUDIO_HIGHLIGHT_CSS_CLASS',
//         'COMPONENT_NAME_CONTENT', 'CONTENT_FOCUS_LABEL_PREFIX',
//         'DEFAULT_PROFILE_IMAGE_PATH', 'OPPIA_AVATAR_LINK_URL',
//         'TWO_CARD_THRESHOLD_PX',
//         function(
//             $anchorScroll, $location, $rootScope, $scope,
//             AudioBarStatusService, AudioPlayerService, AudioPreloaderService,
//             AudioTranslationManagerService, AutogeneratedAudioPlayerService,
//             ContextService, CurrentInteractionService, DeviceInfoService,
//             ExplorationPlayerStateService, LearnerAnswerInfoService,
//             PlayerPositionService, UrlService, UserService,
//             WindowDimensionsService, AUDIO_HIGHLIGHT_CSS_CLASS,
//             COMPONENT_NAME_CONTENT, CONTENT_FOCUS_LABEL_PREFIX,
//             DEFAULT_PROFILE_IMAGE_PATH, OPPIA_AVATAR_LINK_URL,
//             TWO_CARD_THRESHOLD_PX) {
//           var ctrl = this;
//           ctrl.directiveSubscriptions = new Subscription();
//           var _editorPreviewMode = ContextService.isInExplorationEditorPage();
//           var updateDisplayedCard = function() {
//             $scope.arePreviousResponsesShown = false;
//             $scope.lastAnswer = null;
//             $scope.conceptCardIsBeingShown = Boolean(
//               !$scope.getDisplayedCard().getInteraction());
//             $scope.interactionIsActive =
//               !$scope.getDisplayedCard().isCompleted();
//             ctrl.directiveSubscriptions.add(
//               PlayerPositionService.onNewCardAvailable.subscribe(
//                 (data) => $scope.interactionIsActive = false
//               )
//             );
//             CurrentInteractionService.registerPresubmitHook(function() {
//               $scope.waitingForOppiaFeedback = true;
//             });
//             if (!$scope.interactionIsActive) {
//               $scope.lastAnswer = $scope.getDisplayedCard().getLastAnswer();
//             }
//             if (!$scope.conceptCardIsBeingShown) {
//               $scope.interactionInstructions = (
//                 $scope.getDisplayedCard().getInteractionInstructions());
//               $scope.contentAudioTranslations = (
//                 $scope.getDisplayedCard().getVoiceovers());
//               AudioTranslationManagerService
//                 .clearSecondaryAudioTranslations();
//               AudioTranslationManagerService.setContentAudioTranslations(
//                 angular.copy($scope.contentAudioTranslations),
//                 $scope.getDisplayedCard().getContentHtml(),
//                 COMPONENT_NAME_CONTENT);
//               AudioPlayerService.stop();
//               AudioPreloaderService.clearMostRecentlyRequestedAudioFilename();
//               AutogeneratedAudioPlayerService.cancel();
//             }
//           };

//           $scope.isInteractionInline = function() {
//             if ($scope.conceptCardIsBeingShown) {
//               return true;
//             }
//             return $scope.getDisplayedCard().isInteractionInline();
//           };

//           $scope.getContentAudioHighlightClass = function() {
//             if (AudioTranslationManagerService
//               .getCurrentComponentName() ===
//               COMPONENT_NAME_CONTENT &&
//               (AudioPlayerService.isPlaying() ||
//               AutogeneratedAudioPlayerService.isPlaying())) {
//               return AUDIO_HIGHLIGHT_CSS_CLASS;
//             }
//           };

//           $scope.getContentFocusLabel = function(index) {
//             return CONTENT_FOCUS_LABEL_PREFIX + index;
//           };

//           $scope.toggleShowPreviousResponses = function() {
//             $scope.arePreviousResponsesShown =
//               !$scope.arePreviousResponsesShown;
//           };

//           $scope.isWindowNarrow = function() {
//             return WindowDimensionsService.isWindowNarrow();
//           };

//           $scope.canWindowShowTwoCards = function() {
//             return WindowDimensionsService.getWidth() > TWO_CARD_THRESHOLD_PX;
//           };

//           $scope.showAudioBar = function() {
//             return (
//               !$scope.isIframed &&
//               !ExplorationPlayerStateService.isInQuestionMode());
//           };

//           $scope.isContentAudioTranslationAvailable = function() {
//             if ($scope.conceptCardIsBeingShown) {
//               return false;
//             }
//             return (
//               $scope.getDisplayedCard().isContentAudioTranslationAvailable());
//           };

//           $scope.isCurrentCardAtEndOfTranscript = function() {
//             return !$scope.getDisplayedCard().isCompleted();
//           };

//           $scope.isOnTerminalCard = function() {
//             return (
//               $scope.getDisplayedCard().isTerminal());
//           };

//           $scope.getInputResponsePairId = function(index) {
//             return 'input-response-pair-' + index;
//           };
//           ctrl.$onInit = function() {
//             $scope.arePreviousResponsesShown = false;
//             $scope.waitingForOppiaFeedback = false;
//             $scope.windowDimensionsService = WindowDimensionsService;
//             $scope.isIframed = UrlService.isIframed();
//             $scope.isAudioBarExpandedOnMobileDevice = function() {
//               return (
//                 DeviceInfoService.isMobileDevice() &&
//                 AudioBarStatusService.isAudioBarExpanded()
//               );
//             };
//             $scope.getCanAskLearnerForAnswerInfo = (
//               LearnerAnswerInfoService.getCanAskLearnerForAnswerInfo);

//             $scope.OPPIA_AVATAR_IMAGE_URL = (
//               UrlInterpolationService.getStaticImageUrl(
//                 '/avatar/oppia_avatar_100px.svg'));
//             $scope.OPPIA_AVATAR_LINK_URL = OPPIA_AVATAR_LINK_URL;

//             $scope.profilePicture = UrlInterpolationService.getStaticImageUrl(
//               '/avatar/user_blue_72px.png');

//             if (!_editorPreviewMode) {
//               UserService.getProfileImageDataUrlAsync()
//                 .then(function(dataUrl) {
//                   $scope.profilePicture = dataUrl;
//                   // TODO(#8521): Remove the use of $rootScope.$apply()
//                   // once the controller is migrated to angular.
//                   $rootScope.$applyAsync();
//                 });
//             } else {
//               $scope.profilePicture = (
//                 UrlInterpolationService.getStaticImageUrl(
//                   DEFAULT_PROFILE_IMAGE_PATH));
//             }

//             ctrl.directiveSubscriptions.add(
//               PlayerPositionService.onActiveCardChanged.subscribe(
//                 () => {
//                   updateDisplayedCard();
//                 }
//               )
//             );

//             ctrl.directiveSubscriptions.add(
//               ExplorationPlayerStateService.onOppiaFeedbackAvailable.subscribe(
//                 () => {
//                   $scope.waitingForOppiaFeedback = false;

//                   // Auto scroll to the new feedback on mobile device.
//                   if (DeviceInfoService.isMobileDevice()) {
//                     var latestFeedbackIndex = (
//                       $scope.getDisplayedCard()
//                         .getInputResponsePairs().length - 1);
//                     /* Reference: https://stackoverflow.com/questions/40134381
//                       $anchorScroll() without changing actual hash value of url
//                       works only when written inside a timeout of 0 ms. */
//                     $anchorScroll.yOffset = 80;
//                     $location.hash(
//                       $scope.getInputResponsePairId(latestFeedbackIndex));
//                     $anchorScroll();
//                   }
//                 })
//             );
//             updateDisplayedCard();
//           };
//           ctrl.$onDestroy = function() {
//             ctrl.directiveSubscriptions.unsubscribe();
//           };
//         }
//       ]
//     };
//   }
// ]);
