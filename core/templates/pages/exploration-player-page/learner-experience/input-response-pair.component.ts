// Copyright 2021 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Component for an input/response pair in the learner view.
 */

import { Component, Input, Output } from '@angular/core';
import { downgradeComponent } from '@angular/upgrade/static';
import { AppConstants } from 'app.constants';
import { UrlInterpolationService } from 'domain/utilities/url-interpolation.service';
import { InteractionSpecsConstants } from 'pages/interaction-specs.constants';
import { AudioPlayerService } from 'services/audio-player.service';
import { AutogeneratedAudioPlayerService } from 'services/autogenerated-audio-player.service';
import { ExplorationHtmlFormatterService } from 'services/exploration-html-formatter.service';
import { ExplorationPlayerConstants } from '../exploration-player-page.constants';
import { AudioTranslationManagerService } from '../services/audio-translation-manager.service';
import { PlayerPositionService } from '../services/player-position.service';
import { PlayerTranscriptService } from '../services/player-transcript.service';

@Component({
  selector: 'oppia-input-response-pair',
  templateUrl: './input-response-pair.component.html'
})
export class InputResponsePairComponent {
  @Input() data;
  @Output() dataChange;
  @Input() oppiaAvatarImageUrl;
  @Input() inputResponsePairId;
  @Input() isLastPair: boolean;
  OPPIA_AVATAR_LINK_URL;

  constructor(
    private audioPlayerService: AudioPlayerService,
    private audioTranslationManagerService: AudioTranslationManagerService,
    private autogeneratedAudioPlayerService: AutogeneratedAudioPlayerService,
    private explorationHtmlFormatterService: ExplorationHtmlFormatterService,
    private playerPositionService: PlayerPositionService,
    private playerTranscriptService: PlayerTranscriptService,
    private urlInterpolationService: UrlInterpolationService
  ) {}

  getAnswerPopoverUrl(): string {
    // return this.urlInterpolationService.getDirectiveTemplateUrl();
  }

  isVideoRteElementPresentInResponse(): boolean {
    return this.data.oppiaResponse.includes(
      'oppia-noninteractive-video');
  }

  isCurrentCardAtEndOfTranscript(): boolean {
    return this.playerTranscriptService.isLastCard(
      this.playerPositionService.getDisplayedCardIndex());
  }

  getAnswerHtml(): string {
    let displayedCard = this.playerTranscriptService.getCard(
      this.playerPositionService.getDisplayedCardIndex());
    let interaction = displayedCard.getInteraction();
    if (this.data) {
      return this.explorationHtmlFormatterService.getAnswerHtml(
        this.data.learnerInput, interaction.id,
        interaction.customizationArgs);
    }
  }


  // Returns a HTML string representing a short summary of the answer
  // , or null if the answer does not have to be summarized.
  getShortAnswerHtml(): string {
    let displayedCard = this.playerTranscriptService.getCard(
      this.playerPositionService.getDisplayedCardIndex());
    let interaction = displayedCard.getInteraction();
    let shortAnswerHtml = '';
    if (this.data.learnerInput.hasOwnProperty('answerDetails')) {
      shortAnswerHtml = this.data.learnerInput.answerDetails;
    } else if (
      this.data && interaction.id &&
        InteractionSpecsConstants.INTERACTION_SPECS[interaction.id]
          .needs_summary) {
      shortAnswerHtml = (
        this.explorationHtmlFormatterService.getShortAnswerHtml(
          this.data.learnerInput, interaction.id,
          interaction.customizationArgs));
    }
    return shortAnswerHtml;
  }

  getFeedbackAudioHighlightClass(): string {
    if (!this.isLastPair) {
      return '';
    }
    if (this.audioTranslationManagerService
      .getCurrentComponentName() ===
      AppConstants.COMPONENT_NAME_FEEDBACK &&
      (this.audioPlayerService.isPlaying() ||
      this.autogeneratedAudioPlayerService.isPlaying())) {
      return ExplorationPlayerConstants.AUDIO_HIGHLIGHT_CSS_CLASS;
    }
  }
}

angular.module('oppia').directive('oppiaInputResponsePair',
  downgradeComponent({
    component: InputResponsePairComponent
  }) as angular.IDirectiveFactory);

// angular.module('oppia').directive('inputResponsePair', [
//   'UrlInterpolationService', function(UrlInterpolationService) {
//     return {
//       restrict: 'E',
//       scope: {
//         data: '=',
//         oppiaAvatarImageUrl: '&',
//         profilePicture: '&',
//         getInputResponsePairId: '&inputResponsePairId',
//         isLastPair: '&',
//       },
//       template: require('./input-response-pair.directive.html'),
//       controller: [
//         '$scope', 'AudioPlayerService', 'AudioTranslationManagerService',
//         'AutogeneratedAudioPlayerService', 'ExplorationHtmlFormatterService',
//         'PlayerPositionService', 'PlayerTranscriptService',
//         'AUDIO_HIGHLIGHT_CSS_CLASS', 'COMPONENT_NAME_FEEDBACK',
//         'INTERACTION_SPECS', 'OPPIA_AVATAR_LINK_URL',
//         function(
//             $scope, AudioPlayerService, AudioTranslationManagerService,
//             AutogeneratedAudioPlayerService, ExplorationHtmlFormatterService,
//             PlayerPositionService, PlayerTranscriptService,
//             AUDIO_HIGHLIGHT_CSS_CLASS, COMPONENT_NAME_FEEDBACK,
//             INTERACTION_SPECS, OPPIA_AVATAR_LINK_URL) {
//           $scope.OPPIA_AVATAR_LINK_URL = OPPIA_AVATAR_LINK_URL;
//           $scope.getAnswerPopoverUrl = function() {
//             return UrlInterpolationService.getDirectiveTemplateUrl(
//               '/pages/exploration-player-page/templates/' +
//               'answer-popup-container.template.html');
//           };

//           $scope.isVideoRteElementPresentInResponse = function() {
//             return $scope.data.oppiaResponse.includes(
//               'oppia-noninteractive-video');
//           };

//           $scope.isCurrentCardAtEndOfTranscript = function() {
//             return PlayerTranscriptService.isLastCard(
//               PlayerPositionService.getDisplayedCardIndex());
//           };

//           $scope.getAnswerHtml = function() {
//             var displayedCard = PlayerTranscriptService.getCard(
//               PlayerPositionService.getDisplayedCardIndex());
//             var interaction = displayedCard.getInteraction();
//             if ($scope.data) {
//               return ExplorationHtmlFormatterService.getAnswerHtml(
//                 $scope.data.learnerInput, interaction.id,
//                 interaction.customizationArgs);
//             }
//           };

//           // Returns a HTML string representing a short summary of the answer
//           // , or null if the answer does not have to be summarized.
//           $scope.getShortAnswerHtml = function() {
//             var displayedCard = PlayerTranscriptService.getCard(
//               PlayerPositionService.getDisplayedCardIndex());
//             var interaction = displayedCard.getInteraction();
//             var shortAnswerHtml = '';
//             if ($scope.data.learnerInput.hasOwnProperty('answerDetails')) {
//               shortAnswerHtml = $scope.data.learnerInput.answerDetails;
//             } else if (
//               $scope.data && interaction.id &&
//                 INTERACTION_SPECS[interaction.id].needs_summary) {
//               shortAnswerHtml = (
//                 ExplorationHtmlFormatterService.getShortAnswerHtml(
//                   $scope.data.learnerInput, interaction.id,
//                   interaction.customizationArgs));
//             }
//             return shortAnswerHtml;
//           };

//           $scope.getFeedbackAudioHighlightClass = function() {
//             if (!$scope.isLastPair()) {
//               return '';
//             }
//             if (AudioTranslationManagerService
//               .getCurrentComponentName() ===
//               COMPONENT_NAME_FEEDBACK &&
//               (AudioPlayerService.isPlaying() ||
//               AutogeneratedAudioPlayerService.isPlaying())) {
//               return AUDIO_HIGHLIGHT_CSS_CLASS;
//             }
//           };
//         }
//       ]
//     };
//   }]);
