// Copyright 2021 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Component for a set of audio controls for a specific
 * audio translation in the learner view.
 */

import { Component } from '@angular/core';
import { downgradeComponent } from '@angular/upgrade/static';
import { Voiceover } from 'domain/exploration/voiceover.model';
import { Subscription } from 'rxjs';
import { AssetsBackendApiService } from 'services/assets-backend-api.service';
import { AudioBarStatusService } from 'services/audio-bar-status.service';
import { AudioPlayerService } from 'services/audio-player.service';
import { AutogeneratedAudioPlayerService } from 'services/autogenerated-audio-player.service';
import { ContextService } from 'services/context.service';
import { WindowDimensionsService } from 'services/contextual/window-dimensions.service';
import { AudioPreloaderService } from '../services/audio-preloader.service';
import { AudioTranslationLanguageService } from '../services/audio-translation-language.service';
import { AudioTranslationManagerService } from '../services/audio-translation-manager.service';
import { PlayerPositionService } from '../services/player-position.service';

@Component({
  selector: 'oppia-audio-bar',
  templateUrl: './audio-bar.component.html'
})
export class AudioBarComponent {
  lastScrollTop: number = 0;
  isPaused: boolean = true;
  directiveSubscriptions: Subscription = new Subscription();
  languagesInExploration = [];
  audioBarIsExpanded: boolean;
  progressBarIsShown: boolean;
  audioLoadingIndicatorIsShown: boolean;

  constructor(
    private assetsBackendApiService: AssetsBackendApiService,
    private audioBarStatusService: AudioBarStatusService,
    private audioPlayerService: AudioPlayerService,
    private audioPreloaderService: AudioPreloaderService,
    private audioTranslationLanguageService: AudioTranslationLanguageService,
    private audioTranslationManagerService: AudioTranslationManagerService,
    private autogeneratedAudioPlayerService: AutogeneratedAudioPlayerService,
    private contextService: ContextService,
    private playerPositionService: PlayerPositionService,
    private windowDimensionsService: WindowDimensionsService
  ) {}

  ngOnInit(): void {
    this.directiveSubscriptions.add(
      this.audioPlayerService.onAutoplayAudio.subscribe(
        (params) => {
          if (this.audioBarIsExpanded) {
            this.audioPlayerService.stop();
            this.autogeneratedAudioPlayerService.cancel();

            // We use a timeout to allow for any previous audio to have
            // their 'onend' callback called. This is primarily used to
            // address delays with autogenerated audio callbacks.
            setTimeout(() => {
              if (params) {
                this.audioTranslationManagerService
                  .setSecondaryAudioTranslations(
                    params.audioTranslations,
                    params.html,
                    params.componentName
                  );
                if (!this.isPaused) {
                  this.onPlayButtonClick();
                }
              }
            }, 100);
          }
        }
      ));
    this.audioBarIsExpanded = false;
    this.progressBarIsShown = false;

    this.languagesInExploration =
    this.audioTranslationLanguageService.getLanguageOptionsForDropdown();
    this.selectedLanguage = {
      value: this.audioTranslationLanguageService.getCurrentAudioLanguageCode()
    };

    //
    //
    //

    this.audioLoadingIndicatorIsShown = false;
    //

    this.directiveSubscriptions.add(
      this.audioPlayerService.viewUpdate.subscribe(() => {
        //
      }));

    this.audioPreloaderService.setAudioLoadedCallback(onFinishedLoadingAudio);
  }

  ngOnDestroy(): void {
    this.directiveSubscriptions.unsubscribe();
  }

  setProgress(val: {value: number}): void {
    this.audioPlayerService.setCurrentTime(val.value);
  }

  explorationPlayerModeIsActive(): boolean {
    return this.contextService.isInExplorationPlayerPage();
  }

  isAudioBarAvailable(): boolean {
    return this.languagesInExploration.length > 0;
  }

  onNewLanguageSelected(): void {
    this.audioTranslationLanguageService.setCurrentAudioLanguageCode(
      this.selectedLanguage.value);
    this.audioPlayerService.stop();
    this.audioPlayerService.clear();
    this.autogeneratedAudioPlayerService.cancel();
    if (this.isAudioBarAvailable() &&
        !this.isAutogeneratedLanguageCodeSelected()) {
      let audioTranslation = this.getVoiceoverInCurrentLanguage();
      this.audioPreloaderService
        .setMostRecentlyRequestedAudioFilename(
          this.audioTranslation.filename);
      this.audioPreloaderService.restartAudioPreloader(
        this.playerPositionService.getCurrentStateName());
    }
    this.progressBarIsShown = !this.isAutogeneratedLanguageCodeSelected();
  }

  expandAudioBar(): void {
    this.audioBarIsExpanded = true;
    this.audioBarStatusService.markAudioBarExpanded();
  }

  collapseAudioBar(): void {
    this.audioBarStatusService.markAudioBarCollapsed();
    this.audioBarIsExpanded = false;
    this.audioPlayerService.stop();
    this.audioPlayerService.clear();
    this.autogeneratedAudioPlayerService.cancel();
  }

  updateAudioHeaderPosition(): void {
    // var scrollTop = $(this).scrollTop();
    // var audioHeader = angular.element($('.audio-header:first'));
    // if (scrollTop > lastScrollTop) {
    //   audioHeader.addClass('audio-bar-nav-up');
    //   if (!$scope.audioBarIsExpanded) {
    //     audioHeader.addClass('audio-bar-nav-hidden');
    //   }
    // } else if (scrollTop === 0 ||
    //             scrollTop + $(window).height() < $(document).height()) {
    //   audioHeader.removeClass('audio-bar-nav-up');
    //   audioHeader.removeClass('audio-bar-nav-hidden');
    // }
    // lastScrollTop = scrollTop;
  }

  getCurrentAudioLanguageCode(): string {
    return this.audioTranslationLanguageService
      .getCurrentAudioLanguageCode();
  }

  getCurrentAudioLanguageDescription(): string {
    return this.audioTranslationLanguageService
      .getCurrentAudioLanguageDescription();
  }

  getVoiceoverInCurrentLanguage(): Voiceover {
    return this.audioTranslationManagerService.getCurrentAudioTranslations()[
      this.audioTranslationLanguageService.getCurrentAudioLanguageCode()];
  }

  isAudioPlaying(): boolean {
    return this.audioPlayerService.isPlaying() ||
      this.autogeneratedAudioPlayerService.isPlaying();
  }

  isAudioAvailableInCurrentLanguage(): boolean {
    return Boolean(this.getVoiceoverInCurrentLanguage()) ||
      this.isAutogeneratedLanguageCodeSelected();
  }

  doesCurrentAudioTranslationNeedUpdate(): boolean {
    if (!this.isAutogeneratedLanguageCodeSelected()) {
      let audioTranslation = this.getVoiceoverInCurrentLanguage();
      return (this.audioTranslation && this.audioTranslation.needsUpdate);
    } else {
      return false;
    }
  }

  isAutogeneratedLanguageCodeSelected(): boolean {
    return this.audioTranslationLanguageService
      .isAutogeneratedLanguageCodeSelected();
  }

  onBackwardButtonClicked(): void {
    this.audioPlayerService.rewind(5);
  }

  onForwardButtonClicked(): void {
    this.audioPlayerService.forward(5);
  }

  onPlayButtonClicked(): void {
    this.isPaused = !this.isPaused;
    this.progressBarIsShown = !this.isAutogeneratedLanguageCodeSelected();
    if (this.isAutogeneratedLanguageCodeSelected()) {
      this.playPauseAutogeneratedAudioTranslation();
    } else {
      let audioTranslation = this.getVoiceoverInCurrentLanguage();
      if (audioTranslation) {
        this.playPauseUploadedAudioTranslation(
          this.getCurrentAudioLanguageCode());
      }
    }
  }

  isCached(audioTranslation): boolean {
    return this.assetsBackendApiService.isCached(audioTranslation.filename);
  }

  playPauseAutogeneratedAudioTranslation(): void {
    // SpeechSynthesis in Chrome seems to have a bug
    // where if you pause the utterance, wait for around
    // 15 or more seconds, then try resuming, nothing
    // will sound. As a temporary fix, just restart the
    // utterance from the beginning instead of resuming.
    if (this.autogeneratedAudioPlayerService.isPlaying()) {
      this.autogeneratedAudioPlayerService.cancel();
    } else {
      this.autogeneratedAudioPlayerService.play(
        this.audioTranslationManagerService
          .getCurrentHtmlForAutogeneratedAudio(),
        this.audioTranslationLanguageService
          .getSpeechSynthesisLanguageCode(),
        () => {
          // Used to update bindings to show a silent speaker after
          // autogenerated audio has finished playing.
          this.audioTranslationManagerService
            .clearSecondaryAudioTranslations();
        });
    }
  }

  playPauseUploadedAudioTranslation(languageCode): void {
    if (!this.audioPlayerService.isPlaying()) {
      if (this.audioPlayerService.isTrackLoaded()) {
        this.audioPlayerService.play();
      } else {
        this.loadAndPlayAudioTranslation();
      }
    } else {
      this.audioPlayerService.pause();
    }
  }

  playCachedAudioTranslation(audioFilename: string): void {
    this.audioPlayerService.load(audioFilename)
      .then(() => {
        this.audioLoadingIndicatorIsShown = false;
        this.audioPlayerService.play();
      });
  }


  /**
   * Called when an audio file finishes loading.
   * @param {string} audioFilename - Filename of the audio file that
   *                                 finished loading.
   */
  onFinishedLoadingAudio(audioFilename: string): void {
    let mostRecentlyRequestedAudioFilename =
      this.audioPreloaderService.getMostRecentlyRequestedAudioFilename();
    if (this.audioLoadingIndicatorIsShown &&
        audioFilename === mostRecentlyRequestedAudioFilename) {
      this.playCachedAudioTranslation(audioFilename);
    }
  }

  loadAndPlayAudioTranslation(): void {
    this.audioLoadingIndicatorIsShown = true;
    let audioTranslation = this.getVoiceoverInCurrentLanguage();
    this.audioPreloaderService.setMostRecentlyRequestedAudioFilename(
      audioTranslation.filename);
    if (audioTranslation) {
      if (this.isCached(audioTranslation)) {
        this.playCachedAudioTranslation(
          audioTranslation.filename);
      } else if (!this.audioPreloaderService.isLoadingAudioFile(
        audioTranslation.filename)) {
        this.audioPreloaderService.restartAudioPreloader(
          this.playerPositionService.getCurrentStateName());
      }
    }
  }
}

angular.module('oppia').directive('oppiaAudioBar',
  downgradeComponent({
    component: AudioBarComponent
  }) as angular.IDirectiveFactory);

// Angular.module('oppia').directive('audioBar', [
//   'AudioPreloaderService', 'UrlInterpolationService',
//   function(AudioPreloaderService, UrlInterpolationService) {
//     return {
//       restrict: 'E',
//       scope: {},
//       templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(
//         '/pages/exploration-player-page/layout-directives/' +
//         'audio-bar.directive.html'),
//       controller: [
//         '$scope', '$timeout', 'AssetsBackendApiService',
//         'AudioBarStatusService', 'AudioPlayerService',
//         'AudioTranslationLanguageService', 'AudioTranslationManagerService',
//         'AutogeneratedAudioPlayerService', 'ContextService',
//         'PlayerPositionService', 'WindowDimensionsService',
//       function(
//           $scope, $timeout, AssetsBackendApiService,
//           AudioBarStatusService, AudioPlayerService,
//           AudioTranslationLanguageService, AudioTranslationManagerService,
//           AutogeneratedAudioPlayerService, ContextService,
//           PlayerPositionService, WindowDimensionsService) {
//           var ctrl = this;
//           var lastScrollTop = 0;
//           var isPaused = true;

//           ctrl.directiveSubscriptions = new Subscription();

//           $scope.setProgress = function(val: {value: number}) {
//             AudioPlayerService.setCurrentTime(val.value);
//             $scope.$applyAsync();
//           };

//           $scope.explorationPlayerModeIsActive = (
//             ContextService.isInExplorationPlayerPage());

//           $scope.isAudioBarAvailable = function() {
//             return $scope.languagesInExploration.length > 0;
//           };

//           $scope.onNewLanguageSelected = function() {
//             AudioTranslationLanguageService.setCurrentAudioLanguageCode(
//               $scope.selectedLanguage.value);
//             AudioPlayerService.stop();
//             AudioPlayerService.clear();
//             AutogeneratedAudioPlayerService.cancel();
//             if ($scope.isAudioAvailableInCurrentLanguage() &&
//                 !isAutogeneratedLanguageCodeSelected()) {
//               var audioTranslation =
//                 getVoiceoverInCurrentLanguage();
//               AudioPreloaderService.setMostRecentlyRequestedAudioFilename(
//                 audioTranslation.filename);
//               AudioPreloaderService.restartAudioPreloader(
//                 PlayerPositionService.getCurrentStateName());
//             }
//             $scope.progressBarIsShown = !isAutogeneratedLanguageCodeSelected();
//             $scope.$applyAsync();
//           };

//           $scope.expandAudioBar = function() {
//             $scope.audioBarIsExpanded = true;
//             AudioBarStatusService.markAudioBarExpanded();
//           };

//           $scope.collapseAudioBar = function() {
//             AudioBarStatusService.markAudioBarCollapsed();
//             $scope.audioBarIsExpanded = false;
//             AudioPlayerService.stop();
//             AudioPlayerService.clear();
//             AutogeneratedAudioPlayerService.cancel();
//           };

//           var updateAudioHeaderPosition = function() {
//             var scrollTop = $(this).scrollTop();
//             var audioHeader = angular.element($('.audio-header:first'));
//             if (scrollTop > lastScrollTop) {
//               audioHeader.addClass('audio-bar-nav-up');
//               if (!$scope.audioBarIsExpanded) {
//                 audioHeader.addClass('audio-bar-nav-hidden');
//               }
//             } else if (scrollTop === 0 ||
//                        scrollTop + $(window).height() < $(document).height()) {
//               audioHeader.removeClass('audio-bar-nav-up');
//               audioHeader.removeClass('audio-bar-nav-hidden');
//             }
//             lastScrollTop = scrollTop;
//           };

//           var getCurrentAudioLanguageCode = function() {
//             return AudioTranslationLanguageService
//               .getCurrentAudioLanguageCode();
//           };

//           $scope.getCurrentAudioLanguageDescription = function() {
//             return AudioTranslationLanguageService
//               .getCurrentAudioLanguageDescription();
//           };

//           var getVoiceoverInCurrentLanguage = function() {
//             return AudioTranslationManagerService.getCurrentAudioTranslations()[
//               AudioTranslationLanguageService.getCurrentAudioLanguageCode()];
//           };

//           $scope.isAudioPlaying = function() {
//             return AudioPlayerService.isPlaying() ||
//               AutogeneratedAudioPlayerService.isPlaying();
//           };

//           $scope.isAudioAvailableInCurrentLanguage = function() {
//             return Boolean(getVoiceoverInCurrentLanguage()) ||
//               isAutogeneratedLanguageCodeSelected();
//           };

//           $scope.doesCurrentAudioTranslationNeedUpdate = function() {
//             if (!isAutogeneratedLanguageCodeSelected()) {
//               var audioTranslation = getVoiceoverInCurrentLanguage();
//               return (audioTranslation && audioTranslation.needsUpdate);
//             } else {
//               return false;
//             }
//           };

//           var isAutogeneratedLanguageCodeSelected = function() {
//             return AudioTranslationLanguageService
//               .isAutogeneratedLanguageCodeSelected();
//           };

//           $scope.onBackwardButtonClicked = function() {
//             AudioPlayerService.rewind(5);
//           };
//           $scope.onForwardButtonClicked = function() {
//             AudioPlayerService.forward(5);
//           };

//           $scope.onPlayButtonClicked = function() {
//             isPaused = !isPaused;
//             $scope.progressBarIsShown = !isAutogeneratedLanguageCodeSelected();
//             if (isAutogeneratedLanguageCodeSelected()) {
//               playPauseAutogeneratedAudioTranslation();
//             } else {
//               var audioTranslation = getVoiceoverInCurrentLanguage();
//               if (audioTranslation) {
//                 playPauseUploadedAudioTranslation(
//                   getCurrentAudioLanguageCode());
//               }
//             }
//           };

//           var isCached = function(audioTranslation) {
//             return AssetsBackendApiService.isCached(audioTranslation.filename);
//           };

//           var playPauseAutogeneratedAudioTranslation = function() {
//             // SpeechSynthesis in Chrome seems to have a bug
//             // where if you pause the utterance, wait for around
//             // 15 or more seconds, then try resuming, nothing
//             // will sound. As a temporary fix, just restart the
//             // utterance from the beginning instead of resuming.
//             if (AutogeneratedAudioPlayerService.isPlaying()) {
//               AutogeneratedAudioPlayerService.cancel();
//             } else {
//               AutogeneratedAudioPlayerService.play(
//                 AudioTranslationManagerService
//                   .getCurrentHtmlForAutogeneratedAudio(),
//                 AudioTranslationLanguageService
//                   .getSpeechSynthesisLanguageCode(),
//                 function() {
//                   // Used to update bindings to show a silent speaker after
//                   // autogenerated audio has finished playing.
//                   $scope.$applyAsync();
//                   AudioTranslationManagerService
//                     .clearSecondaryAudioTranslations();
//                 });
//             }
//           };

//           var playPauseUploadedAudioTranslation = function(languageCode) {
//             if (!AudioPlayerService.isPlaying()) {
//               if (AudioPlayerService.isTrackLoaded()) {
//                 AudioPlayerService.play();
//               } else {
//                 loadAndPlayAudioTranslation();
//               }
//             } else {
//               AudioPlayerService.pause();
//             }
//           };

//           var playCachedAudioTranslation = function(audioFilename) {
//             AudioPlayerService.load(audioFilename)
//               .then(function() {
//                 $scope.audioLoadingIndicatorIsShown = false;
//                 AudioPlayerService.play();
//               });
//           };

//           /**
//            * Called when an audio file finishes loading.
//            * @param {string} audioFilename - Filename of the audio file that
//            *                                 finished loading.
//            */
//           var onFinishedLoadingAudio = function(audioFilename) {
//             var mostRecentlyRequestedAudioFilename =
//               AudioPreloaderService.getMostRecentlyRequestedAudioFilename();
//             if ($scope.audioLoadingIndicatorIsShown &&
//                 audioFilename === mostRecentlyRequestedAudioFilename) {
//               playCachedAudioTranslation(audioFilename);
//             }
//           };

//           var loadAndPlayAudioTranslation = function() {
//             $scope.audioLoadingIndicatorIsShown = true;
//             var audioTranslation = getVoiceoverInCurrentLanguage();
//             AudioPreloaderService.setMostRecentlyRequestedAudioFilename(
//               audioTranslation.filename);
//             if (audioTranslation) {
//               if (isCached(audioTranslation)) {
//                 playCachedAudioTranslation(
//                   audioTranslation.filename);
//               } else if (!AudioPreloaderService.isLoadingAudioFile(
//                 audioTranslation.filename)) {
//                 AudioPreloaderService.restartAudioPreloader(
//                   PlayerPositionService.getCurrentStateName());
//               }
//             }
//           };

//           ctrl.$onInit = function() {
//             ctrl.directiveSubscriptions.add(
//               AudioPlayerService.onAutoplayAudio.subscribe(
//                 (params) => {
//                   if ($scope.audioBarIsExpanded) {
//                     AudioPlayerService.stop();
//                     AutogeneratedAudioPlayerService.cancel();

//                     // We use a timeout to allow for any previous audio to have
//                     // their 'onend' callback called. This is primarily used to
//                     // address delays with autogenerated audio callbacks.
//                     $timeout(function() {
//                       if (params) {
//                         AudioTranslationManagerService
//                           .setSecondaryAudioTranslations(
//                             params.audioTranslations,
//                             params.html,
//                             params.componentName);
//                       }
//                       if (!isPaused) {
//                         $scope.onPlayButtonClicked();
//                       }
//                     }, 100);
//                   }
//                 }
//               )
//             );
//             $scope.audioBarIsExpanded = false;
//             $scope.progressBarIsShown = false;

//             $scope.languagesInExploration =
//               AudioTranslationLanguageService.getLanguageOptionsForDropdown();
//             $scope.selectedLanguage = {
//               value: (
//                 AudioTranslationLanguageService.getCurrentAudioLanguageCode())
//             };

//             $(window).scroll(function(event) {
//               if (WindowDimensionsService.isWindowNarrow()) {
//                 updateAudioHeaderPosition();
//               }
//             });
//             $scope.audioLoadingIndicatorIsShown = false;

//             $scope.AudioPlayerService = AudioPlayerService;
//             ctrl.directiveSubscriptions.add(
//               AudioPlayerService.viewUpdate.subscribe(() => {
//                 $scope.$applyAsync();
//               })
//             );
//             AudioPreloaderService.setAudioLoadedCallback(
//               onFinishedLoadingAudio);
//           };

//           ctrl.$onDestroy = function() {
//             ctrl.directiveSubscriptions.unsubscribe();
//           };
//         }]
//     };
//   }
// ]);
